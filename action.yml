name: Resolve nodejs application metadata
description: |
  Resolve common application metadata like the application version or whether it is publishable (by our standards).

  Git "history" must be available for this action to perform well. A typical usage will look like so:

  ```yaml
  steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Find application metadata
      id: metadata
      uses: .github/actions/nodejs-application-metadata
  ```

inputs:
  release-branch:
    description: Branch allowed for release. Default to the repository default branch.
    required: false

  hotfix-branch-prefix:
    description: |
      Branch prefix allowed for hotfix. Tags on this branch will set is_hotfix to true.
      Make sure the branch is available with git fetch (if fetch-depth is unset or > 0)
      ```yaml
      - name: Fetch hotfix branch (for action-metadata commit check)
        run: |
        git fetch --no-tags --prune --depth=1000 origin '+refs/heads/release/*:refs/remotes/origin/release/*'
      ```
    required: false

outputs:
  publishable:
    description: |
      'true' if this build can publish artifacts. Only builds from the default branch can be published.
      'false' if this build should not publish its artifacts.
    value: ${{ steps.metadata.outputs.publishable }}
  is-hotfix:
    description: |
      'true' if this build is a hotfix
    value: ${{ steps.metadata.outputs.is-hotfix }}
  is-release:
    description: |
      'true' if this build should create a full release. Only 'publishable' builds can be released. A release is
        typically triggered from a tag matching the 'v1.2.3', semver format.
      'false' if this build should not create a full release.
    value: ${{ steps.metadata.outputs.is-release }}
  version:
    description: |
      The resolved version that the current build can use.
      The version will usually be semver compliant only for releases.
    value: ${{ steps.metadata.outputs.version }}
  npm-tag:
    description: |
      NPM tag to publish package with.
      Defined on only if publishable
      Released semver tag are qualified as 'latest'
      Default branch is qualified 'snapshot'
    value: ${{ steps.metadata.outputs.npm-tag }}

runs:
  using: composite
  steps:
    - name: Find latest released version
      id: latest
      uses: oprypin/find-latest-tag@v1.1.2
      with:
        repository: ${{ github.repository }}
        releases-only: false
        prefix: v
        regex: '^v\d+\.\d+\.\d+$'
        sort-tags: true

    - name: Find application metadata
      id: metadata
      shell: bash
      run: |
        PUBLISHABLE=false
        IS_RELEASE=false
        IS_HOTFIX=false
        VERSION=0.0.0-SNAPSHOT
        DEFAULT_BRANCH=${{ github.event.repository.default_branch }}
        RELEASE_BRANCH=${{ inputs.release-branch }}
        HOTFIX_BRANCH_PREFIX=${{ inputs.hotfix-branch-prefix }}
        NPM_TAG=

        LATEST_VERSION=${{ steps.latest.outputs.tag }}
        LATEST_VERSION=${LATEST_VERSION#v}
        LATEST_VERSION=${LATEST_VERSION:-0.0.0}
        LATEST_VERSION_MINOR=${LATEST_VERSION%.*}

        if [[ "$DEFAULT_BRANCH" == "" ]]; then
          # Schedule triggers have no `github.event` contexts
          DEFAULT_BRANCH="${GITHUB_REF#refs/heads/}"
        fi

        if [[ "$RELEASE_BRANCH" == "" ]]; then
          RELEASE_BRANCH="$DEFAULT_BRANCH"
        fi

        if [[ $GITHUB_REF =~ refs/tags/v[0-9]{1,4}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          NEXT_VERSION_MINOR=${VERSION%.*}
          PUBLISHABLE=$(git merge-base --is-ancestor "$GITHUB_SHA" "origin/$RELEASE_BRANCH" && echo "true" || echo "false")
          NPM_TAG=latest
          if [[ "$PUBLISHABLE" == "false" && ! -z "$HOTFIX_BRANCH_PREFIX" ]]; then
              # Maybe we have an hotfix. Must be ancestor to the corresponding stable hotfix branch
              HOTFIX_BRANCH="${HOTFIX_BRANCH_PREFIX%/}/v${VERSION%.*}.x"
              if [[ ! -z "$(git ls-remote --heads origin ${HOTFIX_BRANCH})" ]]; then
                PUBLISHABLE=$(git merge-base --is-ancestor "$GITHUB_SHA" "origin/$HOTFIX_BRANCH" && echo "true" || echo "false")
                if [[ "$PUBLISHABLE" == "true" ]]; then
                  IS_HOTFIX="true"
                  if [[ "$NEXT_VERSION_MINOR" == "$LATEST_VERSION_MINOR" ]]; then
                    NPM_TAG=latest
                  fi
                fi
              else
                echo "Hotfix branch '${HOTFIX_BRANCH}' does not exists. Could not publish tag '${VERSION}'"
                exit 1
              fi
            fi
          IS_RELEASE="$PUBLISHABLE"
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/tags/} | sed -r 's#/+#-#g')
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "$DEFAULT_BRANCH" = "$BRANCH" ]; then
            VERSION=${LATEST_VERSION%.*}.$((${LATEST_VERSION##*.} + 1))-snapshot.$(date -u "+%Y%m%d%H%M%S")
            PUBLISHABLE=true
            NPM_TAG=snapshot
          else
            VERSION=branch-$BRANCH
          fi
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi

        echo "is-release=$IS_RELEASE" >> $GITHUB_OUTPUT
        echo "publishable=$PUBLISHABLE" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-hotfix=$IS_HOTFIX" >> $GITHUB_OUTPUT
        echo "npm-tag=$NPM_TAG" >> $GITHUB_OUTPUT

        echo "### Application metadata" >> $GITHUB_STEP_SUMMARY
        echo "|Output|Value|" >> $GITHUB_STEP_SUMMARY
        echo "|:---|:---|" >> $GITHUB_STEP_SUMMARY
        echo "|__is-release__|$IS_RELEASE|" >> $GITHUB_STEP_SUMMARY
        echo "|__publishable__|$PUBLISHABLE|" >> $GITHUB_STEP_SUMMARY
        echo "|__version__|$VERSION|" >> $GITHUB_STEP_SUMMARY
        echo "|__is-hotfix__|$IS_HOTFIX|" >> $GITHUB_STEP_SUMMARY
        echo "|__npm-tag__|$NPM_TAG|" >> $GITHUB_STEP_SUMMARY
